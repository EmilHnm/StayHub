@{
    ViewData["Title"] = "Hostel Details";
    @model main_project.Models.Hostel;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<h1 class="text-4xl font-extrabold text-center my-16">Thông tin phòng trọ</h1>

<div x-data="imageGallery" x-on:image-gallery-next.window="imageGalleryNext()"
    x-on:image-gallery-prev.window="imageGalleryPrev()" x-on:keyup.right.window="imageGalleryNext();"
    x-on:keyup.left.window="imageGalleryPrev();" class="w-full h-full select-none">
    <div class="max-w-6xl mx-auto duration-1000 delay-300 select-none ease animate-fade-in-view"
        style="translate: none; rotate: none; scale: none; opacity: 1 ; transform: translate(0px, 0px);">
        <ul x-ref="gallery" id="gallery" class="grid grid-cols-2 gap-3 lg:grid-cols-5">
            <template x-for="(image, index) in imageGallery">
                <li><img x-on:click="imageGalleryOpen" :src="image.photo" :alt="image.alt" :data-index="index+1"
                        class="object-cover select-none w-full h-auto bg-gray-200 rounded cursor-zoom-in aspect-square">
                </li>
            </template>
        </ul>
    </div>
    <template x-teleport="body">
        <div x-show="imageGalleryOpened" x-transition:enter="transition ease-in-out duration-300"
            x-transition:enter-start="opacity-0" x-transition:leave="transition ease-in-in duration-300"
            x-transition:leave-end="opacity-0" x-on:click="imageGalleryClose"
            x-on:keydown.window.escape="imageGalleryClose" x-trap.inert.noscroll="imageGalleryOpened"
            class="fixed inset-0 z-[99] flex items-center justify-center bg-black bg-opacity-50 select-none cursor-zoom-out"
            x-cloak>
            <div class="relative flex items-center justify-center w-11/12 xl:w-4/5 h-11/12">
                <div x-on:click="$event.stopPropagation(); $dispatch('image-gallery-prev')"
                    class="absolute left-0 flex items-center justify-center text-white translate-x-10 rounded-full cursor-pointer xl:-translate-x-24 2xl:-translate-x-32 bg-white/10 w-14 h-14 hover:bg-white/20">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
                    </svg>
                </div>
                <img x-show="imageGalleryOpened" x-transition:enter="transition ease-in-out duration-300"
                    x-transition:enter-start="opacity-0 transform scale-50"
                    x-transition:leave="transition ease-in-in duration-300"
                    x-transition:leave-end="opacity-0 transform scale-50"
                    class="object-contain object-center w-full h-full select-none cursor-zoom-out"
                    :src="imageGalleryActiveUrl" alt="" style="display: none;">
                <div x-on:click="$event.stopPropagation(); $dispatch('image-gallery-next');"
                    class="absolute right-0 flex items-center justify-center text-white -translate-x-10 rounded-full cursor-pointer xl:translate-x-24 2xl:translate-x-32 bg-white/10 w-14 h-14 hover:bg-white/20">
                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                    </svg>
                </div>
            </div>
        </div>
    </template>
</div>

<div class="flex flex-col md:flex-row md:gap-5 mt-16">
    <div class="flex-1 h-max flex flex-col gap-3">
        <div class="p-4 bg-gray-100 border border-purple-500 rounded-md ">
            <h2 class="text-2xl font-bold text-purple-800 mb-2">@(Model.Name)</h2>
            <div class="flex">
                <div class="w-1/2 font-bold text-orange-500 text-xl">
                    <p>Giá phòng: @(String.Format("{0:#,##0.##}", Model.Fee))đ/tháng</p>
                </div>
                <div class="w-1/2 md:text-right">
                    <span>Trạng thái:</span>
                    @if (@Model.Status == "active")
                    {
                        <span class="p-2 rounded-md bg-green-400 text-white">Còn phòng</span>
                    }
                    else
                    {
                        <span class="p-2 rounded-md bg-red-400 text-white">Hết phòng</span>
                    }
                </div>
            </div>
            <p>Loại nhà trọ: @Model.AccommodationType?.Name</p>
            <p>Địa chỉ: @Model.Address</p>
            <p>Số phòng: @Model.Rooms</p>
            <p>Mã phòng: @Model.Id</p>
        </div>
        <div class="p-4 bg-gray-100 border border-purple-500 rounded-md ">
            <h3 class="text-xl font-bold mb-2">Tiện nghi và cơ sở vật chất</h3>
            <div class="grid grid-cols-1 md:grid-cols-2">
                @foreach (var untility in Model.HostelUtility ?? new List<HostelUtility>())
                {
                    <div class="">
                        @untility.Utility?.Name
                    </div>
                }
            </div>
        </div>
        <div class="p-4 bg-gray-100 border border-purple-500 rounded-md ">
            <h3 class="text-xl font-bold mb-2">Mô tả chi tiết</h3>
            <div class="info_content">
                @foreach (var line in Model.Description?.Split('\n') ?? new string[0])
                {
                    <p>@line</p>
                }
            </div>
        </div>
    </div>
    <div class="p-4 bg-gray-100 border border-purple-500 rounded-md min-w-80 h-max" x-data="contactData">
        @if (main_project.Service.AccountService.Instance().GetHostProfile(Context)?.Id != Model.HostProfile?.Id)
        {
            <button type="button" x-on:click="onBooking()"
                class="flex w-full items-center justify-center px-4 py-3 text-md font-medium tracking-wide text-white transition-colors duration-200 rounded-md bg-purple-950 hover:bg-purple-900 focus:ring-2 focus:ring-offset-2 focus:ring-purple-900 focus:shadow-outline focus:outline-none">
                Đăng ký thuê phòng
            </button>
            <p class="text-center text-gray-600 my-3">Hoặc liên hệ</p>
            <div class="text-white bg-black px-4 py-3 rounded-md">
                @if (main_project.Service.AuthService.IsAuthenticated(Context))
                {
                    <p class="font-semibold text-center">@Model.HostProfile?.FullName</p>
                    <p class="">Số điện thoại: @Model.HostProfile?.Phone</p>
                    <p class="">Email: @Model.HostProfile?.User?.Email</p>
                }
                else
                {
                    <a asp-area="" asp-action="SignIn" asp-controller="Auth"
                        class="font-semibold text-center hover:text-white">Đăng nhập để xem
                        thông tin liên hệ</a>
                }
            </div>
        }
        else
        {
            <a asp-area="" asp-action="Edit" asp-controller="Hostel" asp-route-id="@Model.Id"
                class="flex w-full items-center justify-center px-4 py-3 text-md font-medium tracking-wide text-white transition-colors duration-200 rounded-md bg-purple-950 hover:bg-purple-900 focus:ring-2 focus:ring-offset-2 focus:ring-purple-900 focus:shadow-outline focus:outline-none">
                Chỉnh sửa thông tin
            </a>
        }
    </div>
</div>

@section scripts_after
{
    <script>
        const contactData = {
            isShowable: @(main_project.Service.AuthService.IsAuthenticated(Context) ? "true" : "false"),
            onBooking() {
                if (!this.isShowable) {
                    Swal.fire({
                        icon: 'error',
                        text: 'Bạn cần đăng nhập để đăng kí đặt phòng',
                        title: 'Đăng nhập ngay',
                    });
                    return;
                }
                if (@(Model.Status == "active" ? "true" : "false")) {
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        text: 'Phòng đã hết',
                        title: 'Thất bại',
                    });
                }
            }
        };
        const imageGallery = {
            imageGalleryOpened: false,
            imageGalleryActiveUrl: null,
            imageGalleryImageIndex: null,
            imageGallery: [
        @foreach (var image in Model.HostelImages)
        {
            @:{ 'photo': '@image.ImageUrl', 'alt': 'Photo of @Model.Name' },
        }
                                                                                                                                                                                                ],
            imageGalleryOpen(event) {
                this.imageGalleryImageIndex = event.target.dataset.index;
                this.imageGalleryActiveUrl = event.target.src;
                this.imageGalleryOpened = true;
            },
            imageGalleryClose() {
                this.imageGalleryOpened = false;
                setTimeout(() => this.imageGalleryActiveUrl = null, 300);
            },
            imageGalleryNext() {
                this.imageGalleryImageIndex = (this.imageGalleryImageIndex == this.imageGallery.length) ? 1 : (parseInt(this.imageGalleryImageIndex) + 1);
                this.imageGalleryActiveUrl = this.$refs.gallery.querySelector('[data-index=\'' + this.imageGalleryImageIndex + '\']').src;
            },
            imageGalleryPrev() {
                this.imageGalleryImageIndex = (this.imageGalleryImageIndex == 1) ? this.imageGallery.length : (parseInt(this.imageGalleryImageIndex) - 1);
                this.imageGalleryActiveUrl = this.$refs.gallery.querySelector('[data-index=\'' + this.imageGalleryImageIndex + '\']').src;

            }
        }
    </script>
}